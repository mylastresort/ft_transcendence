// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id_42      Int     @unique
  username   String? @unique
  imgProfile String?
  firstName  String?
  lastName   String?
  location   String?
  sammary    String  @default("No information given")

  status String?

  twoFactorAuth       Boolean? @default(false)
  verified2FA         Boolean? @default(false)
  twoFactorAuthSecret String?
  qr2fa               String?

  sentRequests     FriendRequest[] @relation("sentRequests")
  receivedRequests FriendRequest[] @relation("receivedRequests")
  Friends          Friend[]        @relation("UserFriends")
  FriendsOf        Friend[]        @relation("FriendUsers")
  blockedBy        Friend[]        @relation("BlockedBy")

  notifications Notification[]
  player        Player?

  chats    PrivateChat[]
  messages PrivateMessage[]
  Member   Member[]
}

model FriendRequest {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User @relation("sentRequests", fields: [senderId], references: [id])
  senderId Int

  receiver   User @relation("receivedRequests", fields: [receiverId], references: [id])
  receiverId Int

  status String
}

model Friend {
  id Int @id @default(autoincrement())

  //   createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt

  user   User @relation("UserFriends", fields: [userId], references: [id])
  userId Int

  friend   User @relation("FriendUsers", fields: [friendId], references: [id])
  friendId Int

  status String?

  blocked   Boolean? @default(false)
  blockedBy User[]   @relation("BlockedBy")
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  message String
  gameid String?
  receiverId Int?
  senderId Int?
  read    Boolean @default(false)
}

model Achievement {
  description String?
  icon        String
  id          Int      @id @default(autoincrement())
  name        String   @unique
  players     Player[]
}

model Player {
  achievements  Achievement[]
  currentStreak Int           @default(0)
  lastPlayed    DateTime
  level         Float         @default(0)
  longestStreak Int           @default(0)
  losses        Room[]        @relation("losses")
  rooms         Room[]        @relation("PlayerRooms")
  user          User          @relation(fields: [userId], references: [id])
  userId        Int           @id
  wins          Room[]        @relation("wins")
}

model Room {
  createdAt       DateTime  @default(now())
  endedAt         DateTime?
  games           Int       @default(0)
  hostId          Int
  id              String    @id
  isInvite        Boolean   @default(false)
  loser           Player?   @relation(fields: [loserUserId], references: [userId], name: "losses")
  loserUserId     Int?
  losserLevel     Float?
  map             String
  maxGames        Int
  name            String
  players         Player[]  @relation("PlayerRooms")
  speed           Float
  startedAt       DateTime?
  status          String
  winner          Player?   @relation(fields: [winnerUserId], references: [userId], name: "wins")
  winnerPostLevel Float?
  winnerUserId    Int?
  guestScore Int      @default(0)
  hostScore  Int      @default(0)
}

// Private messages
model PrivateMessage {
  id       Int         @id @default(autoincrement())
  sender   User        @relation(fields: [senderId], references: [id])
  senderId Int
  sendAt   DateTime    @default(now())
  content  String
  chat     PrivateChat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId   Int
}

model PrivateChat {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updateAt  DateTime         @default(now())
  members   User[]
  Messages  PrivateMessage[]
}

// channels
model ChannelMessage {
  id        Int      @id @default(autoincrement())
  sendAt    DateTime @default(now())
  content   String
  sender    Member   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  Int
  channel   Channel?  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int?
}

model Member {
  id             Int              @id @default(autoincrement())
  nickname       String
  joinedAt       DateTime         @default(now())
  isOwner        Boolean          @default(false)
  isAdministator Boolean          @default(false)
  isMember       Boolean          @default(true)
  isBanned       Boolean          @default(false)
  bannedTime     DateTime?
  isMuted        Boolean          @default(false)
  mutedTime      DateTime?
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  channel        Channel?         @relation(fields: [channleId], references: [id])
  channleId      Int?
  messages       ChannelMessage[]
}

model Channel {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updateAt    DateTime         @updatedAt
  channelName String           @unique
  image       String           @default("https://static.vecteezy.com/system/resources/thumbnails/000/426/510/small/Sports__28154_29.jpg")
  description String?
  password    String?
  isProtected Boolean
  isPrivate   Boolean
  members     Member[]
  messages    ChannelMessage[]
}
