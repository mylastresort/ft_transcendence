// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id_42      Int     @unique
  username   String? @unique
  imgProfile String?
  firstName  String?
  lastName   String?
  location   String?
  sammary    String  @default("No information given")

  status String?

  twoFactorAuth       Boolean? @default(false)
  verified2FA         Boolean? @default(false)
  twoFactorAuthSecret String?
  qr2fa               String?

  sentRequests     FriendRequest[] @relation("sentRequests")
  receivedRequests FriendRequest[] @relation("receivedRequests")
  Friends          Friend[]        @relation("UserFriends")
  FriendsOf        Friend[]        @relation("FriendUsers")
  blockedBy        Friend[]        @relation("BlockedBy")

  notifications Notification[]
  player        Player?
}

model FriendRequest {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User @relation("sentRequests", fields: [senderId], references: [id])
  senderId Int

  receiver   User @relation("receivedRequests", fields: [receiverId], references: [id])
  receiverId Int

  status String
}

model Friend {
  id Int @id @default(autoincrement())

  //   createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt

  user   User @relation("UserFriends", fields: [userId], references: [id])
  userId Int

  friend   User @relation("FriendUsers", fields: [friendId], references: [id])
  friendId Int

  status String?

  blocked   Boolean? @default(false)
  blockedBy User[]   @relation("BlockedBy")
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  message String
  gameid String?
  read    Boolean @default(false)
}

model Achievement {
  description String
  id          Int      @id @default(autoincrement())
  name        String
  players     Player[]
}

model Player {
  achievements  Achievement[]
  currentStreak Int           @default(0)
  level         Int           @default(0)
  longestStreak Int           @default(0)
  losses        Int           @default(0)
  rooms         Room[]
  user          User?         @relation(fields: [userId], references: [id])
  userId        Int           @id
  wins          Int           @default(0)
}

model Room {
  createdAt  DateTime @default(now())
  games      Int      @default(0)
  guestScore Int      @default(0)
  hostScore  Int      @default(0)
  id         String   @id
  map        String
  maxGames   Int
  players    Player[]
  status     String
}